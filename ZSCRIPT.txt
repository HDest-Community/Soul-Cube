version "4.0"

class SoulCubeHandler : StaticEventHandler
{
	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		switch (e.Replacement.GetClassName())
		{
			case 'Lumberjack':
				if (random[cuberand]() <= 32)
				{
					e.Replacement = "HDSoulCube";
				}
				break;
		}
	}
}

class HDSoulCube : HDWeapon
{
	enum SCProperty
	{
		SCProp_UseOffset,
		SCProp_Frag
	}

	action void A_AddOffset(int ofs)
	{
		invoker.WeaponStatus[SCProp_UseOffset] += ofs;
	}

	override string, double GetPickupSprite() { return "SLCBA3A7", 0.5; }
	override string GetHelpText()
	{
		return WEPHELP_FIRE.."  Attack\n"
		..WEPHELP_FIRE.."+"..WEPHELP_ZOOM.."  Grant spiritual armor";
	}
	override double WeaponBulk() { return 80 * Amount; }

	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
	{
		vector2 bob = hpl.hudbob * 0.3;
		int Offset = WeaponStatus[SCProp_UseOffset];
		bob.y += Offset;
		int BaseYOffset = -220;
		
		sb.DrawImage("SLCBA3A7", (0, BaseYOffset + 68) + bob, sb.DI_SCREEN_CENTER_BOTTOM | sb.DI_ITEM_CENTER, alpha: 1.0, scale:(2, 2));
		if (WeaponStatus[SCProp_Frag] >= MinFrag)
		{
			sb.DrawString(sb.pSmallFont, "Use us.", (0, BaseYOffset + 120) + bob, sb.DI_SCREEN_CENTER_BOTTOM | sb.DI_TEXT_ALIGN_CENTER, Font.CR_GREEN);
		}
		else
		{
			sb.DrawString(sb.pSmallFont, "Not enough frag.", (0, BaseYOffset + 120) + bob, sb.DI_SCREEN_CENTER_BOTTOM | sb.DI_TEXT_ALIGN_CENTER, Font.CR_GOLD);
		}
	}

	override int GetSbarNum(int flags)
	{
		let HDHud = HDStatusBar(StatusBar);

		int Frag =  WeaponStatus[SCProp_Frag];
		HDHud.SavedColour = Frag >= MinFrag ? Font.CR_GREEN : Font.CR_RED;
		return Frag;
	}

	// override void InitializeWepStats(bool idfa)
	// {
	// 	WeaponStatus[SCProp_Frag] = MaxFrag;
	// }

	override void ActualPickup(actor other, bool silent)
	{
		Super.ActualPickup(other, silent);

		if (!owner)
		{
			return;
		}

		Active = false;
		bNOGRAVITY = false;
		FlyTicker = 0;
		ReadyToShoot = false;
		ShootTicker = 0;
	}

	override void DoEffect()
	{
		if (WeaponStatus[SCProp_Frag] < MaxFrag && level.time % (35 * 3) == 0 && !random(0, 1))
		{
			let Iterator = BlockThingsIterator.Create(owner, MaxRange);
			while (Iterator.Next())
			{
				if (Iterator.thing is "BFGNecroShard")
				{
					owner.A_StartSound("SoulCube/Ammo", 9, CHANF_LOCAL, volume: 0.45);
					WeaponStatus[SCProp_Frag]++;
					Iterator.thing.Destroy();

					if (WeaponStatus[SCProp_Frag] == MinFrag)
					{
						owner.A_StartSound("SoulCube/Ready", 10, CHANF_LOCAL, volume: 0.25);
					}
					break;
				}
			}
		}

		Super.DoEffect();
	}

	override void Tick()
	{
		if (Active)
		{
			Angle += 10;

			if (ReadyToShoot)
			{
				for (int i = 0; i < 10; ++i)
				{
					int PartPitch = random(-90, 90);
					A_SpawnParticle("44FF44", SPF_RELATIVE, random(5, 45), frandom(1.0, 3.0), random(0, 360), 12 * cos(PartPitch), 0, height / 2 + 12 * sin(PartPitch) * 0.8, frandom(0.25, 1.5) * cos(PartPitch), 0, frandom(0.25, 1.5) * sin(PartPitch));
				}

				for (double i = 0; i < 360; i += 0.5)
				{
					A_SpawnParticle("44FF44", SPF_RELATIVE, 1, 16, i, MaxRange, 0, -(pos.z - floorz));
				}
			}
		}

		Super.Tick();
	}

	const MinFrag = 5;
	const MaxFrag = 20;
	const MaxRange = 512;
	bool Active;
	bool SpiritArmor;
	bool ReadyToShoot;
	int FlyTicker;
	int ShootTicker;

	Default
	{
		Height 15;
		+INVENTORY.INVBAR
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up the soul cube.";
		Scale 0.5;
		HDWeapon.RefId "slc";
		Tag "Soul Cube";
	}

	States
	{
		Spawn:
			SLCB A 1
			{
				if (invoker.Active)
				{
					invoker.FlyTicker++;
					if (!invoker.ReadyToShoot)
					{
						if (invoker.SpiritArmor)
						{
							vel *= 0.97;
						}
						vel.xy *= 0.96;
						vel.z += 0.05;
						if (pos.z - floorz > 64)
						{
							A_StartSound("SoulCube/Use", CHAN_WEAPON, volume: 0.5);
							invoker.ReadyToShoot = true;
						}
					}
					else
					{
						vel *= 0.93;
						if (invoker.WeaponStatus[SCProp_Frag] < 1 || invoker.FlyTicker > 35 * 13)
						{
							invoker.bNOGRAVITY = false;
							invoker.Active = false;
						}

						if (invoker.ShootTicker++ >= 20)
						{
							invoker.ShootTicker = 0;
							double OldAngle = Angle;
							if (invoker.SpiritArmor)
							{
								// [Ace] Give nearby players some spiritual armour.
								let PlayerIterator = BlockThingsIterator.Create(invoker, MaxRange);
								while (PlayerIterator.Next())
								{
									let SpiritTarget = HDPlayerPawn(PlayerIterator.thing);
									if (SpiritTarget && CheckSight(SpiritTarget))
									{
										A_Face(SpiritTarget, 0, 0);
										SpiritTarget.A_GiveInventory("SpiritualArmour", 1);
										A_CustomRailgun(0, 0, "", "44FF44", RGF_CENTERZ | RGF_SILENT | RGF_NOPIERCING | RGF_FULLBRIGHT, 0, 50.0, null, 0, 0, 2048, 18, 0.2, 1.0, veleffect: 0);
										invoker.WeaponStatus[SCProp_Frag] = 0;
									}
								}
							}
							else
							{
								let MainIterator = BlockThingsIterator.Create(invoker, MaxRange);
								while (MainIterator.Next())
								{
									Actor ZapTarget = MainIterator.thing;
									if (ZapTarget.bISMONSTER && ZapTarget.bSHOOTABLE && !ZapTarget.bFRIENDLY && ZapTarget.Health > 0 && CheckSight(ZapTarget))
									{
										invoker.WeaponStatus[SCProp_Frag]--;
										A_Face(ZapTarget, 0, 0);
										A_CustomRailgun(0, 0, "", "55FF88", RGF_CENTERZ | RGF_SILENT | RGF_NOPIERCING | RGF_FULLBRIGHT, 0, 50.0, "SoulPuff", 0, 0, 2048, 18, 0.2, 1.0, veleffect: 0);

										// [Ace] Give nearby players some blues.
										let PlayerIterator = BlockThingsIterator.Create(invoker, MaxRange);
										while (PlayerIterator.Next())
										{
											Actor HealTarget = PlayerIterator.thing;
											let plr = HDPlayerPawn(HealTarget);
											if (plr && CheckSight(HealTarget))
											{
												A_Face(HealTarget, 0, 0);
												A_CustomRailgun(0, 0, "", "1133FF", RGF_CENTERZ | RGF_SILENT | RGF_NOPIERCING | RGF_FULLBRIGHT, 0, 50.0, null, 0, 0, 2048, 18, 0.2, 1.0, veleffect: 0);
												plr.regenblues += 4;
											}
										}
										break;
									}
								}
							}
							Angle = OldAngle;
						}
					}
				}
			}
			Loop;
		Select0:
			TNT1 A 0 A_Raise(999);
			Wait;
		Deselect0:
			TNT1 A 0 A_Lower(999);
			Wait;
		Ready:
			TNT1 A 1
			{
				if (PressingUser3())
				{
					A_MagManager("PickupManager");
					return;
				}

				int off = invoker.WeaponStatus[SCProp_UseOffset];
				if (off > 0)
				{
					invoker.WeaponStatus[SCProp_UseOffset] = off * 2 / 3;
				}

				else if (PressingFire())
				{
					SetWeaponState("Lower");
					return;
				}

				A_WeaponReady(WRF_ALLOWUSER3 | WRF_NOFIRE);
			}
			Goto ReadyEnd;
		Lower:
			TNT1 AA 1 A_AddOffset(6);
			TNT1 AAAA 1 A_AddOffset(14);
			TNT1 AAAA 1 A_AddOffset(30);
			TNT1 A 0 A_JumpIf(!PressingFire(), "Ready");
			TNT1 A 1
			{
				if (invoker.WeaponStatus[SCProp_Frag] < MinFrag)
				{
					SetWeaponState("Nope");
					return;
				}

				if (PressingFire())
				{
					invoker.SpiritArmor = false;
					if (PressingZoom() && invoker.WeaponStatus[SCProp_Frag] == MaxFrag)
					{
						invoker.SpiritArmor = true;
					}
					DropInventory(invoker);
					invoker.Active = true;
					invoker.bNOGRAVITY = true;
				}
			}
			Wait;
	}
}

class SoulPuff : BFGPuff
{
	States
	{
		Spawn:
			BFE2 A 1 Bright NoDelay
			{
				if (target)
				{
					target = target.target;
				}
				A_StartSound("misc/bfgrail", 9005);
			}
			BFE2 A 3 Bright
			{
				A_Explode(random(196, 320), 64, 0);
			}
			BFE2 ABCDE 2 Bright A_FadeOut(0.1);
			Stop;
	}
}